private void For(bool ejecuta)
        {
            int tempChar = contadorCaracteres - 4;  // Guarda la posición para volver después al principio
            int tempLine = Lexico.linea;

            match("for");
            match("(");

            Asignacion();

            int inicioSegundoBloque = contadorCaracteres - 1;
            int lineaSegundoBloque = Lexico.linea;
            match(";");

            //Console.WriteLine($"Contenido (Antes de condición) = {Contenido}");
            bool ejecutarFor = Condicion() && ejecuta;
            //Console.WriteLine($"Contenido (Después de condición) = {Contenido}");

            // Se guarda la posición antes de consumir la tercera parte del For
            int inicioTercerBloque = contadorCaracteres - 1;
            int lineaTercerBloque = Lexico.linea;
            //Console.WriteLine($"Contenido (Antes de guardar la posición) = {Contenido} // Número de caracter = {lineaTercerBloque}");
            match(";");
            //Asignacion();

            while (Contenido != ")")
            {
                nextToken();
            }

            match(")");

            //bool ejecutarBloque = ejecutarFor;

            int inicioBloqueInstrucciones = contadorCaracteres - 2;
            int lineaBloqueInstrucciones = Lexico.linea;
            //Console.WriteLine($"Probando caracter = {Contenido}");

            if (Contenido == "{")
            {
                BloqueInstrucciones(ejecuta);
            }
            else
            {
                Instruccion(ejecuta);
            }

            while (ejecutarFor)
            {
                archivo.DiscardBufferedData();
                archivo.BaseStream.Seek(inicioTercerBloque, SeekOrigin.Begin);
                contadorCaracteres = inicioTercerBloque;
                Lexico.linea = lineaTercerBloque;
                nextToken();
                //Console.WriteLine($"Contenido (Después de cambiar el puntero) = {Contenido}");
                Asignacion();
                //Console.WriteLine($"Contenido (Después de llamar Asignacion) = {Contenido}");

                archivo.DiscardBufferedData();
                archivo.BaseStream.Seek(inicioSegundoBloque, SeekOrigin.Begin);
                contadorCaracteres = inicioSegundoBloque;
                Lexico.linea = lineaSegundoBloque;
                nextToken();
                ejecutarFor = Condicion() && ejecuta;
                //Console.WriteLine($"Contenido (Después de ejecutarFor) = {Contenido}");
                nextToken();
                //Console.WriteLine($"Contenido (1 + Después de ejecutarFor) = {Contenido}");


                archivo.DiscardBufferedData();
                archivo.BaseStream.Seek(tempChar, SeekOrigin.Begin);
                contadorCaracteres = tempChar;
                Lexico.linea = tempLine;
                //Console.WriteLine($"Contenido (Antes de consumir el token) = {Contenido}");
                nextToken();
                //Console.WriteLine($"Contenido (Después de volver al principio) = {Contenido}");
                //Console.WriteLine("TERMINÓ LA CONDICIÓN");

                archivo.DiscardBufferedData();
                archivo.BaseStream.Seek(inicioBloqueInstrucciones, SeekOrigin.Begin);
                contadorCaracteres = inicioBloqueInstrucciones;
                Lexico.linea = lineaBloqueInstrucciones;
                nextToken();
                //Console.WriteLine($"Contenido (Después de volver al inicio del bloque) = {Contenido}");
                if (Contenido == "{")
                {
                    BloqueInstrucciones(ejecuta);
                }
                else
                {
                    Instruccion(ejecuta);
                }
                
            }
        }